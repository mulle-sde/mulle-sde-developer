#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_sde()
{
   log_fluff "####################################"
   log_fluff mulle-sde ${MULLE_SDE_FLAGS} "$@"
   log_fluff "####################################"

   exekutor mulle-sde ${MULLE_SDE_FLAGS} "$@"
}


expect_file()
{
   log_entry "expect_file" "$@"

   local expected="$1"

   if [ ! -f "${expected}" ]
   then
      fail "File \"${expected}\" was expected to exist"
   fi
}


install_projecttype()
{
   local directory="$1"
   local installdir="$2"
   local projecttype="$3"

   r_filepath_concat "${directory}" "${projecttype}"
   projectdir="${RVAL}"

   run_mulle_sde init -d "${projectdir}" \
                      --no-post-init \
                      -m "mulle-sde/c-developer" \
                      "${projecttype}" || exit 1
   (
      cd "${projectdir}" && run_mulle_sde update
   ) || exit 1

   run_mulle_sde install --prefix "${installdir}" \
                         --symlink \
                         "${projectdir}" || exit 1
}


check_library_files()
{
   local installdir="$1"

   expect_file "${installdir}/include/library/library.h"
   expect_file "${installdir}/lib/liblibrary.a"
}


check_executable_files()
{
   local installdir="$1"

   expect_file "${installdir}/bin/executable"
}


check_framework_files()
{
   local installdir="$1"

   expect_file "${installdir}/Frameworks/framework.framework/Headers/framework.h"
   expect_file "${installdir}/Frameworks/framework.framework/Versions/A/framework"
   expect_file "${installdir}/Frameworks/framework.framework/Resources/Info.plist"
}

main()
{
   MULLE_SDE_FLAGS="$@"

   _options_mini_main "$@" && set -x

   #
   # memo: remember we only deal with relative paths w/o leading /!
   # for simplicity it's also assumed that no relative path contain a
   # trailing '/'
   #
   local directory
   local projectdir
   local installdir

   r_make_tmp_directory || exit 1
   directory="${RVAL}"

   r_filepath_concat "${directory}" "install"
   installdir="${RVAL}"

   install_projecttype "${directory}" "${installdir}" "library"
   check_library_files "${installdir}"

   log_verbose "----- #1 PASSED -----"

   install_projecttype "${directory}" "${installdir}" "executable"
   check_executable_files "${installdir}"

   log_verbose "----- #2 PASSED -----"

   case "${MULLE_UNAME}" in
      darwin)
         install_projecttype "${directory}" "${installdir}" "framework"
         check_framework_files "${installdir}"

         log_verbose "----- #3 PASSED -----"
      ;;
   esac

   log_info "----- ALL PASSED -----"
}


init()
{
   MULLE_SDE_EXTENSION_PATH="${PWD}/../../src:${MULLE_SDE_EXTENSION_PATH}"
}

init "$@"
main "$@"
