#! /usr/bin/env bash

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"


run_mulle_sde()
{
   log_fluff "####################################"
   log_fluff mulle-sde ${MULLE_SDE_FLAGS} "$@"
   log_fluff "####################################"

   exekutor mulle-sde ${MULLE_SDE_FLAGS} "$@"
}


expect_file()
{
   log_entry "expect_file" "$@"

   local expected="$1"

   if [ ! -f "${expected}" ]
   then
      fail "File \"${expected}\" was expected to exist"
   fi
}


r_create_project()
{
   local projecttype="$1"; shift

   local directory="$1"
   local name="$2"

   r_filepath_concat "${directory}" "${name}"
   run_mulle_sde -s init -d "${RVAL}" \
                         --no-post-init \
                         -m "mulle-sde/c-developer" \
                         "${projecttype}" || exit 1
}


r_create_executable()
{
   r_create_project executable "$@"
}


r_create_library()
{
   r_create_project library "$@" &&
   ( cd "${RVAL}" && run_mulle_sde update )
}


check_library_files()
{
   local installdir="$1"

   expect_file "${installdir}/include/library/library.h"
   expect_file "${installdir}/lib/liblibrary.a"
}


check_executable_files()
{
   local installdir="$1"

   expect_file "${installdir}/bin/executable"
}


check_framework_files()
{
   local installdir="$1"

   expect_file "${installdir}/Frameworks/framework.framework/Headers/framework.h"
   expect_file "${installdir}/Frameworks/framework.framework/Versions/A/framework"
   expect_file "${installdir}/Frameworks/framework.framework/Resources/Info.plist"
}


main()
{
   MULLE_SDE_FLAGS="$@"

   _options_mini_main "$@"

   #
   # memo: remember we only deal with relative paths w/o leading /!
   # for simplicity it's also assumed that no relative path contain a
   # trailing '/'
   #
   local directory
   local projectdir
   local installdir

   directory="`make_tmp_directory`" || exit 1

   r_filepath_concat "${directory}" "install"
   installdir="${RVAL}"

   r_create_library "${directory}" "a" &
   r_create_library "${directory}" "b" &
   r_create_library "${directory}" "c" &
   r_create_library "${directory}" "d" &

   wait

   r_create_executable "${directory}" "foo"
   projectdir="${RVAL}"

   # add two libs to foo

   (
      cd "${projectdir}" &&
      run_mulle_sde environment --global set MULLE_FETCH_SEARCH_PATH "${directory}"
      run_mulle_sde dependency add --marks no-singlephase https://foo.com/a.git &&
      run_mulle_sde dependency add --marks no-singlephase https://foo.com/b.git &&
      run_mulle_sde fetch
   ) || fail "Failed during test setup"

   # now lets craft

   (
      cd "${projectdir}" &&
      run_mulle_sde craft
   ) || fail "Build failure"

   log_verbose "----- #1 PASSED -----"

   r_create_executable "${directory}" "bar"
   projectdir="${RVAL}"

   # add four libs to foo

   (
      cd "${projectdir}" &&
      run_mulle_sde environment --global set MULLE_FETCH_SEARCH_PATH "${directory}"

      # serializing step, a and b will be "inherited"
      run_mulle_sde dependency add --marks no-link,no-header,singlephase https://foo.com/foo.git &&
      run_mulle_sde dependency add --marks no-singlephase https://foo.com/c.git &&
      run_mulle_sde dependency add --marks no-singlephase https://foo.com/d.git &&
      run_mulle_sde fetch
   ) || fail "Failed during test setup"

   # now lets craft

   (
      cd "${projectdir}" &&
      run_mulle_sde craftorder &&
      run_mulle_sde craft
   ) || fail "Build failure"

   log_verbose "----- #2 PASSED -----"

   log_info "----- ALL PASSED -----"

   exekutor rmdir_safer "${directory}"
}



init()
{
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir`" || exit 1

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

   MULLE_SDE_EXTENSION_PATH="${PWD}/../../src:${MULLE_SDE_EXTENSION_PATH}"
}


init "$@"
main "$@"

