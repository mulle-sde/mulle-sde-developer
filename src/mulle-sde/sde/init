#! /usr/bin/env bash

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"


setup_gitattributes()
{
   local text

   rexekutor fgrep -q -s -e 'generated by mulle-sde' .gitattributes
   case $? in
      0)
         return 0
      ;;
   esac

   text='# ### > generated by mulle-sde (extensions/mulle-sde/sde/init)
# Protect some binary test files

*.stderr    binary
*.stdout    binary

# Tweak GitHub language statistics

# .inc is generally C

*.inc       linguist-language=C

# remove boring files
.mulle/**   linguist-generated
.vscode/**  linguist-generated
cmake/**    linguist-generated

# ### < generated by mulle-sde (extensions/mulle-sde/sde/init)
'

   redirect_append_exekutor .gitattributes printf "%s\n" "${text}"
}


setup_gitignore()
{
   log_entry "setup_gitignore" "$@"

   rexekutor fgrep -q -s -e 'generated by mulle-sde' .gitignore
   case $? in
      0)
         return 0
      ;;
   esac

   local text


   text='.gitignore

# ### > generated by mulle-sde (extensions/mulle-sde/sde/init)

# .mulle/var directory is not interesting
var/

# per-user/per-host tweaks are probably not interesting in the repository

environment-user-*.sh
environment-host-*.sh
!environment-host-travis-ci-*.sh

# stash is generally boring
stash/

# build stuff is boring too
build/
kitchen/
dependency/
addiction/
*.tmp/
tmp.*/

# test exe files are boring

test*/**/*.exe

# ### < generated by mulle-sde (extensions/mulle-sde/sde/init)
'

   redirect_append_exekutor .gitignore printf "%s\n" "${text}"
}


main()
{
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         --f)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         --marks)
            shift
         ;;

         -*)
            fail "unknown flag \"$1\""
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   setup_gitignore
   setup_gitattributes
}


########
###
### INIT
###
_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "mulle-bashfunctions-env"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH ($PATH) - mulle-bashfunctions not installed ?" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

   # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh"  || \
      (
         echo "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" >&2  &&
         exit 1
      )
}
###
### INIT
###
########


_init "$@" # needs params
main "$@"
