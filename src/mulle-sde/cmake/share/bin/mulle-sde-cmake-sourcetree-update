#! /usr/bin/env bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#

[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"


usage()
{
   [ $# -ne 0 ] && log_error "$1"

   cat <<EOF >&2
Usage:
   mulle-sde-cmake-sourcetree-update <action> <filename> <category>

   Let mulle-monitor run this for you. None of the arguments are actually
   used.

EOF
   exit 1
}


# https://cmake.org/Wiki/CMake_Checking_Platform
uname_to_cmake()
{
   log_entry "uname_to_cmake" "$@"

   local uname="$1"

   case "${uname}" in
      darwin)
         echo "APPLE"
      ;;

      "")
         fail "uname is empty"
      ;;

      *)
         tr 'a-z' 'A-Z' <<< "${uname}"
      ;;
   esac
}


osexclude_to_cmake_if()
{
   log_entry "osexclude_to_cmake_if" "$@"

   local marks="$1"

   local cmakevar

   local excludes
   local onlys

   set -o noglob ; IFS=","

   for osexclude in ${marks}
   do
      IFS="${DEFAULT_IFS}"; set +o noglob

      case "${osexclude}" in
         only-os-*)
            cmakevar="`uname_to_cmake "${osexclude:8}"`"
            onlys="`concat "${onlys}" "${cmakevar}" " OR " `"
         ;;

         no-os-*)
            cmakevar="`uname_to_cmake "${osexclude:5}"`"
            excludes="`concat "${excludes}" "${cmakevar}" " AND "`"
         ;;
      esac
   done
   IFS="${DEFAULT_IFS}"; set +o noglob

   if [ ! -z "${onlys}" ]
   then
      echo "if( ${onlys})"
      return
   fi

   if [ ! -z "${excludes}" ]
   then
      case "${excludes}" in
         *" OR "*)
            echo "if( NOT (${excludes}))"
         ;;

         *)
            echo "if( NOT ${excludes})"
         ;;
      esac
   fi
}


emit_cmake_legacy_dependency()
{
   log_entry "emit_cmake_legacy_dependency" "$@"

   local name="$1"
   local marks="$2"
   local aliases="$3"
   local containername="$4"

   [ -z "${name}" ] && internal_fail "name is empty"
   [ -z "${containername}" ] && internal_fail "containername is empty"

   local indent
   local ifstatement
   local endifstatement

   if [ ! -z "${marks}" ]
   then
      ifstatement="`osexclude_to_cmake_if "${marks}" `"
      indent="   "
   fi

   local cmakevar
   local identifier

   identifier="` tr 'a-z-' 'A-Z_' <<< "${name}" `"

   if [ ! -z "${ifstatement}" ]
   then
      echo "${ifstatement}"
   fi

   local names

   names="` concat "${name}" "${aliases}" `"

   cat << EOF
${indent}if( NOT ${identifier}_LIBRARY)
${indent}   find_library( ${identifier}_LIBRARY NAMES ${names})
${indent}   message( STATUS "${identifier}_LIBRARY is \${${identifier}_LIBRARY}")
${indent}   set( ${containername}
${indent}      \${${identifier}_LIBRARY}
${indent}      \${${containername}}
${indent}      CACHE INTERNAL "need to cache this"
${indent}   )
${indent}endif()
EOF
   if [ ! -z "${ifstatement}" ]
   then
      echo "endif()"
   fi

   echo
}


emit_cmake_include_dependency()
{
   log_entry "emit_cmake_include_dependency" "$@"

   local name="$1"
   local marks="$2"

   local indent
   local ifstatement

   if [ ! -z "${marks}" ]
   then
      ifstatement="`osexclude_to_cmake_if "${marks}" `"
      indent="   "
   fi

   if [ ! -z "${ifstatement}" ]
   then
      echo "${ifstatement}"
   fi

   #
   # cmake is supergimped with respect to include so we finagle the module
   # path before including and reset it afterwards
   # https://stackoverflow.com/questions/3249459/for-the-cmake-include-command-what-is-the-difference-between-a-file-and-a-mod
   #
   local identifier

   identifier="` tr 'a-z-' 'A-Z_' <<< "${name}" `"

   # PROJECT_UPCASE_IDENTIFIER is set by mulle-sde(!)
   [ -z "${PROJECT_UPCASE_IDENTIFIER}" ] && internal_fail "PROJECT_UPCASE_IDENTIFIER is missing"

   cat << EOF
${indent}# temporarily expand CMAKE_MODULE_PATH
${indent}set( MEMO_CMAKE_MODULE_PATH "\${CMAKE_MODULE_PATH}")
${indent}list( INSERT CMAKE_MODULE_PATH 0 "\${DEPENDENCIES_DIR}/include/${name}/cmake")
${indent}include( CMakeDependenciesAndLibraries)
${indent}set( CMAKE_MODULE_PATH "\${MEMO_CMAKE_MODULE_PATH}")
${indent}set( \${${PROJECT_UPCASE_IDENTIFIER}_DEFINITIONS}
${indent} \${${identifier}_DEFINITIONS}
${indent} \${${PROJECT_UPCASE_IDENTIFIER}_DEFINITIONS}
${indent}endif()
EOF
   if [ ! -z "${ifstatement}" ]
   then
      echo "endif()"
   fi

   echo
}


get_no_include_dependency_list()
{
   log_entry "get_no_include_dependency_list" "$@"

   exekutor mulle-sde ${MULLE_SDE_FLAGS} dependency list \
                                                    --format "ami={aliases}" \
                                                    --marks no-cmake-include,build,link \
                                                    --output-raw \
                                                    --no-output-header
}


get_include_dependency_list()
{
   log_entry "get_include_dependency_list" "$@"

   exekutor mulle-sde ${MULLE_SDE_FLAGS} dependency list \
                                                    --format "ami={aliases}" \
                                                    --marks cmake-include,build,link \
                                                    --output-raw \
                                                    --no-output-header
}


get_library_list()
{
  log_entry "get_library_list" "$@"

   exekutor mulle-sde ${MULLE_SDE_FLAGS} library list --marks link \
                                                      -- \
                                                      --output-raw \
                                                      --no-output-header
}


_emit_dependency()
{
   log_entry "_emit_dependency" "$@"

   local name="$1"; shift
   local dependency="$1"; shift
   local emitter="$1"; shift

   local dependency

   set -o noglob ; IFS="
"
   for dependency in ${dependency}
   do
      IFS="${DEFAULT_IFS}"; set +o noglob

      local address
      local marks
      local aliases

      IFS=";" read address marks aliases <<< "${dependency}"

      if [ ! -z "${address}" ]
      then
         log_verbose "Emit statements for ${name} ${C_MAGENTA}${C_BOLD}${address}"
         ${emitter} "${address}" "${marks}" "${aliases}" "$@"
      fi
   done
   IFS="${DEFAULT_IFS}"; set +o noglob
}


emit_dependency()
{
   log_entry "emit_dependency" "$@"

   _emit_dependency "dependency" "$@"
}


emit_library()
{
   log_entry "emit_library" "$@"

   _emit_dependency "library" "$@"
}


#
# collect library and dependency, with routines in
# mulle-sde-updatesupport.sh for reuse with stuff other than cmake
#
emit_cmake_library()
{
   log_entry "emit_cmake_library" "$@"

   local library

   library="`get_library_list`" || return 1
   emit_library "${library}" emit_cmake_legacy_dependency "OS_SPECIFIC_LIBRARIES"
}


emit_cmake_dependency()
{
   log_entry "emit_cmake_dependency" "$@"

   local dependency

   # OBJC is in this
   dependency="`get_include_dependency_list`" || return 1
   emit_dependency "${dependency}" emit_cmake_include_dependency

   dependency="`get_no_include_dependency_list`" || return 1
   emit_dependency "${dependency}" emit_cmake_legacy_dependency "DEPENDENCY_LIBRARIES"
}


main()
{
   log_entry "main" "$@"

   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help)
            usage
         ;;

         -p|--projectname)
            [ "$#" -eq 1 ] && usage "missing argument to \"$1\""
            shift

            PROJECT_NAME="$1"
         ;;

         -*)
            usage "unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local text_lib
   local text_dep

   text_lib="`emit_cmake_library`"     || exit 1
   text_dep="`emit_cmake_dependency`"  || exit 1

   if [ -z "${text_lib}" ]
   then
      text_lib="# no library"
   fi
   if [ -z "${text_dep}" ]
   then
      text_dep="# no linkable dependency"
   fi

   text_lib="# This file will be regenerated by \`mulle-sde output|monitor\`. Edits will be lost.
${text_lib}"

   text_dep="# This file will be regenerated by \`mulle-sde output|monitor\`. Edits will be lost.

${text_dep}"

   log_fluff "Create cmake files (${PWD})"

   MULLE_SDE_LIBRARIES_FILE="${MULLE_SDE_LIBRARIES_FILE:-cmake/_CMakeLibraries.cmake}"
   MULLE_SDE_DEPENDENCIES_FILE="${MULLE_SDE_DEPENDENCIES_FILE:-cmake/_CMakeDependencies.cmake}"

   log_verbose "Writing ${C_RESET_BOLD}${MULLE_SDE_LIBRARIES_FILE}"
   exekutor mkdir -p  "`fast_dirname "${MULLE_SDE_LIBRARIES_FILE}"`" 2> /dev/null
   redirect_exekutor "${MULLE_SDE_LIBRARIES_FILE}" echo "${text_lib}"
   log_verbose "Writing ${C_RESET_BOLD}${MULLE_SDE_DEPENDENCIES_FILE}"
   exekutor mkdir -p  "`fast_dirname "${MULLE_SDE_DEPENDENCIES_FILE}"`" 2> /dev/null
   redirect_exekutor "${MULLE_SDE_DEPENDENCIES_FILE}" echo "${text_dep}"
}


_init()
{
   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env "libexec-dir" 2> /dev/null`"
      [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ] && \
         echo "mulle-bashfunctions-env not installed" >&2 && \
         exit 1
   fi

   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" || exit 1
}

_init "$@"
main "$@"
