#! /bin/sh
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE:-}" = 'YES' -o "${MULLE_SOURCETREE_TRACE:-}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION="1.1.0"
##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if ! [ ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR+x} ]
then
   MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "${1:-}" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################


get_includes()
{
   local filename="$1"

   sed -n -e 's/^.*include([ ]*\([^) ]*\)[ ]*\([^ ]*\)[ ]*).*/\1;\2/p' "${filename}"
}


find_cmake_file()
{
   local filename="$1"
   local originator="$2"
   local searchpath="$3"

   case "${filename}" in
      *.*)
         searchpath="`dirname -- "${originator}"`"
      ;;

      *)
         filename="${filename}.cmake"
      ;;
   esac

   local directory

   IFS=':';
   for directory in ${searchpath}
   do
      IFS="${DEFAULT_IFS}"

      if [ -f "${directory}/${filename}" ]
      then
         printf "%s\n" "${directory}/${filename}"
         return 0
      fi
   done
   IFS="${DEFAULT_IFS}"

   return 1
}


pretty()
{
   local filename="$1"

   case "${filename}" in
      ./*)
         pretty "${filename#./}"
         return
      ;;
   esac

   printf "%s\n" "${filename}"
}

_list_cmake_include()
{
   local filename="$1"
   local originator="$2"
   local searchpath="$3"

   local actualfile

   if ! actualfile="`find_cmake_file "${filename}" "${originator}" "${searchpath}"`"
   then
      if [ -z "${optional}" ]
      then
         echo "\"${filename}\" not found" >&2
         return 1
      fi
         return 0
   fi

   echo "   \"`pretty "${originator}"`\" -> \"`pretty "${actualfile}"`\""

   list_cmake_includes "${actualfile}" "${searchpath}"
}


list_cmake_includes()
{
   local filename="$1"
   local searchpath="$2"

   local actualfile
   local includefile
   local includeinfo
   local optional

   local includes

   includes="`get_includes "${filename}"`"
   shell_disable_glob; IFS=$'\n'
   for includeinfo in ${includes}
   do
      shell_enable_glob; IFS="${DEFAULT_IFS}"

      includefile="${includeinfo%;*}"
      optional="${includeinfo%*#}"

      if [ "${includefile}" = '"${FILE}"' ]
      then
         local directory

         directory="`dirname -- "${filename}"`"
         for includefile in "${directory}"/cmake/[A-Za-z0-9]*.cmake
         do
            _list_cmake_include "${includefile}" "${filename}" "${searchpath}"
         done
      else
         _list_cmake_include "${includefile}" "${filename}" "${searchpath}"
      fi
   done
   shell_enable_glob; IFS="${DEFAULT_IFS}"
}


main()
{
   local filename="${1:-CMakeLists.txt}"

   CMAKE_SEARCHPATH="${CMAKE_SEARCHPATH:-cmake:cmake/reflect:cmake/share:.}"

   if [ ! -f "${filename}" ]
   then
      echo "\"${filename}\" not found" >&2
      exit 1
   fi

   echo "digraph xxx {"
   echo "   ordering=out"
   echo "   rankdir=\"LR\""
   echo "   node [ shape=\"note\" ]"
   echo "   \"`pretty "${filename}"`\""

   list_cmake_includes "${filename}" "${CMAKE_SEARCHPATH}"
   echo "}"
}


DEFAULT_IFS="${IFS}"

main "$@"
